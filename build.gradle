plugins {
    id 'java'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.0.0-M2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com.mairwunnx'
version = '1.0.0-SNAPSHOT'

new File('creds.properties').createNewFile()
final def properties = new Properties()
properties.load(new FileInputStream('creds.properties'))

final def config = [
    "products.datasource.driver-class-name": 'org.postgresql.Driver',
    "products.datasource.url"              : System.getenv('backendtest_pg_url') ?: properties.get('backendtest_pg_url'),
    "products.datasource.username"         : System.getenv('backendtest_pg_user') ?: properties.get('backendtest_pg_user'),
    "products.datasource.password"         : System.getenv('backendtest_pg_pass') ?: properties.get('backendtest_pg_pass'),
    "mongodb.datasource.url"               : System.getenv('mongodb_url') ?: properties.get('mongodb_url')
]

bootRun {
    environment += config
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation(libs.bundles.jetbrains)
    implementation(libs.bundles.lombok)
    implementation(libs.bundles.mapstruct)
    implementation(libs.bundles.jedis)
    implementation(libs.bundles.guava)
    implementation(libs.bundles.auth0jwt)
    implementation(libs.bundles.apache)
    implementation(libs.bundles.spring)
    implementation(libs.bundles.bouncycastle)

    runtimeOnly(libs.bundles.drivers)
    compileOnly(libs.bundles.lombok)
    developmentOnly(libs.bundles.devtools)

    annotationProcessor(libs.bundles.springConfigurationProcessor)
    annotationProcessor(libs.bundles.lombok)
    annotationProcessor(libs.bundles.mapstruct)

    testImplementation(libs.bundles.springTest)
}

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}
