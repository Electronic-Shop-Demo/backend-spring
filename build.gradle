plugins {
    id 'java'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.0.0-M3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'nu.studer.jooq' version '7.1.1'
    id 'org.flywaydb.flyway' version '8.5.13'
}

group = 'com.mairwunnx'
version = '1.0.0-SNAPSHOT'

new File('creds.properties').createNewFile()
final def properties = new Properties()
properties.load(new FileInputStream('creds.properties'))

final def config = [
    "products_datasource_driver-class-name"          : System.getenv('pgsql_shop_db_driver') ?: 'org.postgresql.Driver',
    "products_datasource_url"                        : System.getenv('pgsql_shop_db_url') ?: properties.get('pgsql_shop_db_url'),
    "products_datasource_username"                   : System.getenv('pgsql_shop_db_user') ?: properties.get('pgsql_shop_db_user'),
    "products_datasource_password"                   : System.getenv('pgsql_shop_db_pass') ?: properties.get('pgsql_shop_db_pass'),
    "mongodb_datasource_url"                         : System.getenv('mongodb_files_db_url') ?: properties.get('mongodb_files_db_url'),
    "app_security_jwt_key-alias"                     : System.getenv('shop_jwt_token_als') ?: properties.get('shop_jwt_token_als'),
    "app_security_jwt_keystore-password"             : System.getenv('shop_jwt_token_pwd') ?: properties.get('shop_jwt_token_pwd'),
    "app_security_jwt_private-key-passphrase"        : System.getenv('shop_jwt_token_phr') ?: properties.get('shop_jwt_token_phr'),
    "app_security_jwt_refresh_key-alias"             : System.getenv('shop_jwt_refresh_als') ?: properties.get('shop_jwt_refresh_als'),
    "app_security_jwt_refresh_keystore-password"     : System.getenv('shop_jwt_refresh_pwd') ?: properties.get('shop_jwt_refresh_pwd'),
    "app_security_jwt_refresh_private-key-passphrase": System.getenv('shop_jwt_refresh_phr') ?: properties.get('shop_jwt_refresh_phr')
]

configurations {
    flywayMigration

    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation(libs.bundles.jetbrains)
    implementation(libs.bundles.lombok)
    implementation(libs.bundles.mapstruct)
    implementation(libs.bundles.jedis)
    implementation(libs.bundles.guava)
    implementation(libs.bundles.auth0jwt)
    implementation(libs.bundles.apache)
    implementation(libs.bundles.spring)
    implementation(libs.bundles.bouncycastle)
    implementation(libs.bundles.jooq)
    implementation(libs.bundles.mongock)
    implementation(libs.bundles.drivers)

    runtimeOnly(libs.bundles.drivers)
    compileOnly(libs.bundles.lombok)
    developmentOnly(libs.bundles.devtools)

    jooqGenerator(libs.bundles.pgsql)
    flywayMigration(libs.bundles.pgsql)

    annotationProcessor(libs.bundles.springConfigurationProcessor)
    annotationProcessor(libs.bundles.lombok)
    annotationProcessor(libs.bundles.mapstruct)

    testImplementation(libs.bundles.springTest)
}

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += '--enable-preview'
    options.fork = true
    options.failOnError = false
    options.debug = false
}

tasks.withType(Test) {
    jvmArgs += '--enable-preview'
}

tasks.withType(Checkstyle) {
    exclude '**/generated-src/**'

    reports {
        xml.required = false
        html.required = true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle.xsl')
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of 17
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

flyway {
    configurations = ['flywayMigration']
    url = config['products_datasource_url']
    user = config['products_datasource_username']
    password = config['products_datasource_password']
    locations = ['classpath:db/migration']
}

jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = config['products_datasource_driver-class-name']
                    url = config['products_datasource_url']
                    user = config['products_datasource_username']
                    password = config['products_datasource_password']
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = '.*'
                        excludes = ''
                    }
                    generate {
                        generatedAnnotation = true

                        nullableAnnotation = true
                        nullableAnnotationType = 'org.jetbrains.annotations.Nullable'

                        nonnullAnnotation = true
                        nonnullAnnotationType = 'org.jetbrains.annotations.NotNull'

                        springAnnotations = true

                        javaTimeTypes = true
                        deprecated = false
                        records = true
                        fluentSetters = true

                        globalTableReferences = true
                        globalCatalogReferences = false
                        globalSchemaReferences = false
                        globalSequenceReferences = false
                        globalDomainReferences = false
                        globalUDTReferences = false
                        globalRoutineReferences = false
                        globalQueueReferences = false
                        globalLinkReferences = false
                    }
                    target {
                        packageName = 'com.mairwunnx.application'
                    }
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    dependsOn tasks.named('flywayMigrate')

    inputs.files(fileTree('src/main/resources/db/migration'))
        .withPropertyName('migrations')
        .withPathSensitivity(PathSensitivity.RELATIVE)

    allInputsDeclared = true

    launcher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of 17
        vendor = JvmVendorSpec.ADOPTIUM
    }
}
