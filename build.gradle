plugins {
    id 'java'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.0.0-M2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com.mairwunnx'
version = '1.0.0-SNAPSHOT'

new File('creds.properties').createNewFile()
final def properties = new Properties()
properties.load(new FileInputStream('creds.properties'))

final def config = [
    "products.datasource.driver-class-name"          : 'org.postgresql.Driver',
    "products.datasource.url"                        : System.getenv('pgsql_shop_db_url') ?: properties.get('pgsql_shop_db_url'),
    "products.datasource.username"                   : System.getenv('pgsql_shop_db_user') ?: properties.get('pgsql_shop_db_user'),
    "products.datasource.password"                   : System.getenv('pgsql_shop_db_pass') ?: properties.get('pgsql_shop_db_pass'),
    "mongodb.datasource.url"                         : System.getenv('mongodb_files_db_url') ?: properties.get('mongodb_files_db_url'),
    "app.security.jwt.key-alias"                     : System.getenv('shop_jwt_token_als') ?: properties.get('shop_jwt_token_als'),
    "app.security.jwt.keystore-password"             : System.getenv('shop_jwt_token_pwd') ?: properties.get('shop_jwt_token_pwd'),
    "app.security.jwt.private-key-passphrase"        : System.getenv('shop_jwt_token_phr') ?: properties.get('shop_jwt_token_phr'),
    "app.security.jwt.refresh.key-alias"             : System.getenv('shop_jwt_refresh_als') ?: properties.get('shop_jwt_refresh_als'),
    "app.security.jwt.refresh.keystore-password"     : System.getenv('shop_jwt_refresh_pwd') ?: properties.get('shop_jwt_refresh_pwd'),
    "app.security.jwt.refresh.private-key-passphrase": System.getenv('shop_jwt_refresh_phr') ?: properties.get('shop_jwt_refresh_phr')
]

bootRun {
    environment += config
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation(libs.bundles.jetbrains)
    implementation(libs.bundles.lombok)
    implementation(libs.bundles.mapstruct)
    implementation(libs.bundles.jedis)
    implementation(libs.bundles.guava)
    implementation(libs.bundles.auth0jwt)
    implementation(libs.bundles.apache)
    implementation(libs.bundles.spring)
    implementation(libs.bundles.bouncycastle)

    runtimeOnly(libs.bundles.drivers)
    compileOnly(libs.bundles.lombok)
    developmentOnly(libs.bundles.devtools)

    annotationProcessor(libs.bundles.springConfigurationProcessor)
    annotationProcessor(libs.bundles.lombok)
    annotationProcessor(libs.bundles.mapstruct)

    testImplementation(libs.bundles.springTest)
}

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += '--enable-preview'
    options.fork = true
    options.failOnError = false
    options.debug = false
}

tasks.withType(Test) {
    jvmArgs += '--enable-preview'
    environment += config
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle.xsl')
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of 17
        vendor = JvmVendorSpec.ADOPTIUM
    }
}
